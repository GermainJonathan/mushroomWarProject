/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mushroomwarjava;

import component.House;
import component.Unity;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

/**
 * Fenêtre du jeu
 * 
 * @author Jonathan Germain
 */
public class gameUI extends javax.swing.JFrame {
    
    /*
    * Constante indiquant le nombre d'unité maximum qui peuvent être présent dans la partie au même moment
    */
    public static int MAX_UNITIES_SPAWNABLE = 300;
    
    /**
     * Liste des Maisons de la carte
     */
    private List<House> housesOfGame;
    
    /**
     * Liste des unitées rouge active en dehors de Maison ( en train d'attaquer ) 
     */
    private List<Unity> redUnit;
    
    /**
     * Liste des unitées bleu active en dehors de Maison ( en train d'attaquer ) 
     */
    private List<Unity> blueUnit;
    
    /**
     * Liste des thread de mouvement actif
     */
    private List<targetHouse> threadVector;
    
    /**
     * Joueur
     */
    private Player actionPlayer;
    
    /**
     * Intelligence Artificiel de la partie
     */
    private botIA bot;
    
    /**
     * thread courant de déplacement d'une unité
     */
    private targetHouse targetAttack;
    
    /**
     * Thread gérant le déroulement de la partit et la progression de la bar d'état
     */
    private stateOfGame progressGame;
    
    /**
     * Compteur de thread de mouvement
     */
    private int threadId = 0;
    
    /**
     * Creates new form gameUI
     */
    public gameUI() {
        initComponents();   // Initialisation des composants graphique ( Genéré par NetBeans )
        initGame(); // On intialise le jeu avec les joueurs actif, le bot et on instancie les maisons
        this.Menu.setVisible(false);    // On cache le menu du jeu
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Menu = new javax.swing.JPanel();
        backToMenu = new javax.swing.JButton();
        Continuer = new javax.swing.JButton();
        Sauvegarder = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        unitiesProgessBar1 = new component.UnitiesProgessBar();
        spawnBlue = new component.House();
        spawnRed = new component.House();
        house7 = new component.House();
        house6 = new component.House();
        house5 = new component.House();
        house4 = new component.House();
        house3 = new component.House();
        house2 = new component.House();
        house1 = new component.House();
        map = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mushroom War Java Project");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/mushroomwarjava/assets/mushroomWarIcon.gif")));
        setMaximumSize(new java.awt.Dimension(1095, 610));
        setMinimumSize(new java.awt.Dimension(1095, 610));
        setResizable(false);
        setSize(new java.awt.Dimension(1095, 610));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setAlignmentX(0.0F);
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setMaximumSize(new java.awt.Dimension(1095, 610));
        jPanel1.setMinimumSize(new java.awt.Dimension(1095, 610));
        jPanel1.setLayout(null);

        Menu.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 0), 3, true));
        Menu.setLayout(null);

        backToMenu.setText("Revenir au menu");
        backToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenuActionPerformed(evt);
            }
        });
        Menu.add(backToMenu);
        backToMenu.setBounds(50, 210, 140, 40);

        Continuer.setText("Continuer");
        Continuer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinuerActionPerformed(evt);
            }
        });
        Menu.add(Continuer);
        Continuer.setBounds(50, 90, 140, 40);

        Sauvegarder.setText("Sauvegarder");
        Sauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SauvegarderActionPerformed(evt);
            }
        });
        Menu.add(Sauvegarder);
        Sauvegarder.setBounds(50, 150, 140, 40);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pause");
        Menu.add(jLabel1);
        jLabel1.setBounds(0, 20, 230, 30);

        jPanel1.add(Menu);
        Menu.setBounds(440, 150, 230, 310);

        unitiesProgessBar1.setColor1(java.awt.Color.blue);
        unitiesProgessBar1.setColor2(java.awt.Color.red);
        unitiesProgessBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(unitiesProgessBar1);
        unitiesProgessBar1.setBounds(400, 0, 300, 15);
        jPanel1.add(spawnBlue);
        spawnBlue.setBounds(30, 10, 64, 90);
        jPanel1.add(spawnRed);
        spawnRed.setBounds(890, 500, 64, 90);
        jPanel1.add(house7);
        house7.setBounds(330, 40, 64, 90);
        jPanel1.add(house6);
        house6.setBounds(60, 300, 64, 90);
        jPanel1.add(house5);
        house5.setBounds(620, 350, 64, 90);
        jPanel1.add(house4);
        house4.setBounds(1020, 300, 64, 90);
        jPanel1.add(house3);
        house3.setBounds(740, 40, 64, 90);
        jPanel1.add(house2);
        house2.setBounds(550, 170, 64, 90);
        jPanel1.add(house1);
        house1.setBounds(310, 480, 64, 90);

        map.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        map.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mushroomwarjava/assets/map.jpg"))); // NOI18N
        map.setToolTipText("");
        map.setAlignmentY(0.0F);
        map.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        map.setName(""); // NOI18N
        jPanel1.add(map);
        map.setBounds(0, 0, 1095, 610);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evenement lors du click sur le bouton Continuer du menu Pause
     * @param evt Evenement
     */
    private void ContinuerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinuerActionPerformed
        this.Menu.setVisible(false); // on cache le menu
        /**
         * Redemarrage de la génération d'unité par les maisons active
         */
        for(House elem: this.housesOfGame) {
            elem.pauseGeneration();
        }
        /**
         * Redemarrage des mouvements des unitiées
         */
        for(targetHouse elem: this.threadVector) {
            elem.continueMove();
        }
        this.bot.restartIntelligence(); // On redemarre le BOT
        this.requestFocus();    // On rends le focus au JEU ( permet de refaire pause si besoin ) 
    }//GEN-LAST:event_ContinuerActionPerformed

    /**
     * Evenement lors du click sur "Revenir au menu du jeu"
     * @param evt Evenement
     */
    private void backToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenuActionPerformed
        this.Menu.setVisible(false); // on cache le menu
        this.setVisible(false); // on cache cette instance du jeu
        new mushroomUI().setVisible(true);  // on retourne au menu principal
        this.progressGame.stopGame(); // on arrete la progression de la partie
    }//GEN-LAST:event_backToMenuActionPerformed

    /**
     * Controleur permettant l'ouverture du menu pause
     * @param evt Evenement
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE) { // lors de l'appuie sur ESC
            /**
             * On arrête tous les threads en cours
             */
            for(targetHouse elem: this.threadVector) {
                elem.pauseMove();
            }
            for(House elem: this.housesOfGame) {
                elem.destroyGeneration();
            }
            this.Menu.setVisible(true);
            jPanel1.setComponentZOrder(this.Menu, 0); // on place le menu au premier plan
            this.bot.intelligencePause();
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * TODO: Evenement lors du click sur le bouton Sauvegarder
     * @param evt Evenement
     */
    private void SauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SauvegarderActionPerformed
        File f = new File("test.save");
        FileOutputStream fis = null;
        try {
            fis = new FileOutputStream(f);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(gameUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ObjectOutputStream ois = new ObjectOutputStream(fis);
            ois.writeBytes("Test de sauvegarde");
            ois.close();
            fis.close();
        } catch (IOException ex) {
            Logger.getLogger(gameUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SauvegarderActionPerformed
    
    /**
     * Générateur d'id de thread de mouvement
     * @return l'id à attribuer au Thread
     */
    public int getId() {
        return this.threadId++;
    }

    /**
     * Assignation du joueur
     * @param playable Joueur
     */
    public void setActionPlayer(Player playable) {
        this.actionPlayer = playable;
        this.chooseSpawn();
    }
    
    /**
     * Getter du joueur de la partie
     * @return Renvoie le joueur actif
     */
    public Player getActionPlayer() {
        return this.actionPlayer;
    }
    
    /**
     * Retourne la liste des maisons de la partie
     * @return Liste de toute les maisons
     */
    public List<House> getHouses() {
        return this.housesOfGame;
    }
    
    /**
     * Retourne les élements graphique du jeu
     * Permet de supprimer une unité de l'affichage du jeu
     * @return JPanel du jeu
     */
    public JPanel getActiveStateGame() {
        return this.jPanel1;
    }
    
    /**
     * Démarrage de la partie
     * Lancement des thread
     */
    public void gameBegin() {
        this.progressGame.start();
    }
    
    /**
     * Permet l'initialisation du jeu
     * On assigne les spawns au différent participant suivant la configuration du jeu
     */
    private void chooseSpawn() {
        if(this.actionPlayer.getTeam() == Player.TEAM_BLUE) {
            this.bot = new botIA(Player.TEAM_RED, "IA", this);
            this.spawnBlue.setPlayer(this.actionPlayer);
            this.spawnRed.setPlayer(this.bot);
            this.bot.intelligenceStart();
            /**
             * Démmarage de la partie avec 10 unitées chacun
             */
            for(int i = 0; i < 10; i++) {
                this.spawnBlue.addUnit(new Unity(this.actionPlayer));
                this.spawnRed.addUnit(new Unity(this.bot));
            }
        } else {
            this.bot = new botIA(Player.TEAM_BLUE, "IA", this);
            this.spawnRed.setPlayer(this.actionPlayer);
            this.spawnBlue.setPlayer(this.bot);
            this.bot.intelligenceStart();
            /**
             * Démmarage de la partie avec 10 unitées chacun
             */
            for(int i = 0; i < 10; i++) {
                this.spawnRed.addUnit(new Unity(this.actionPlayer));
                this.spawnBlue.addUnit(new Unity(this.bot));
            }
        }
    }
    
    /**
     * Ajoute une untié à la partie et lance un thread de mouvement vers la maison ciblé
     * @param unit Unité à ajouter
     * @param x Position x du spawn de l'unité
     * @param y Position y du spawn de l'unité
     * @param target Maison ciblé
     */
    public void addUnitToGame(Unity unit, int x, int y, House target) {
        if(unit.getPlayer().getTeam() == Player.TEAM_BLUE) {
            this.setBlueUnit(unit);
        } else {
            this.setRedUnit(unit);
        }
        jPanel1.add(unit);
        jPanel1.setComponentZOrder(unit, 0);
        unit.setLocation(x, y);
        this.goToAttackedHouse(unit, target);
    }
    
    /**
     * Lancement du thread de mouvement d'une unité vers une cible
     * @param unit unité à bouger
     * @param target Maison cible
     */
    private void goToAttackedHouse(Unity unit, House target) {
        this.targetAttack = new targetHouse(this.jPanel1, unit, target, this.getId());
        this.threadVector.add(targetAttack);
        this.targetAttack.start();
    }
    
    /**
     * Initialisation du jeu
     */
    private void initGame() {
        this.housesOfGame = new ArrayList<>();
        this.blueUnit = new ArrayList<>();
        this.redUnit = new ArrayList<>();
        this.threadVector = new ArrayList<>();
        this.housesOfGame.add(house1);
        this.housesOfGame.add(house2);
        this.housesOfGame.add(house3);
        this.housesOfGame.add(house4);
        this.housesOfGame.add(house5);
        this.housesOfGame.add(house6);
        this.housesOfGame.add(house7);
        this.housesOfGame.add(spawnBlue);
        this.housesOfGame.add(spawnRed);
        for(House elem: housesOfGame) {
            elem.setupGame(this);
        }
        this.progressGame = new stateOfGame(this, unitiesProgessBar1);
    } 
        
    /**
     * Retourne le nombre d'unité encore en jeu mais non rattaché à une maison
     * @return Entier indiquant le nombre total d'unitées en jeu
     */
    public int getCountUnitiesOfTheGame() {
        return (this.blueUnit.size() + this.redUnit.size());
    }
    
    /**
     * Retourne le nombre d'unité bleu active
     * @return Entier indiquant le nombre d'unité de l'équipe bleu
     */
    public int getBlueUnities() {
        return this.blueUnit.size();
    }
    
    /**
     * Retourne le nombre d'unité rouge active
     * @return Entier indiquant le nombre d'unité de l'équipe rouge
     */
    public int getRedUnities() {
        return this.redUnit.size();
    }

    /**
     * Permet d'ajouter une unité rouge à la liste
     * @param redUnit Unité à ajouter
     */
    public void setRedUnit(Unity redUnit) {
        this.redUnit.add(redUnit);
    }
    
    /**
     * Supprime une unité de la liste rouge
     */
    private void removeRedUnit() {
        if(this.redUnit.size() != 0) {
            this.redUnit.remove(this.redUnit.size()-1);
        }
    }
 
    /**
     *  Permet d'ajouter une unité bleu à la liste
     * @param blueUnit Unité à ajouter 
     */
    public void setBlueUnit(Unity blueUnit) {
        this.blueUnit.add(blueUnit);
    }
    
    /**
     * Supprime une unité de la liste bleu
     */
    private void removeBlueUnit() {
        if(this.blueUnit.size() != 0) {
            this.blueUnit.remove(this.blueUnit.size()-1);
        }
    }
    
    /**
     * gestion de la suppression d'unitées
     * @param unit Unité à supprimer
     */
    public void removeFromUnitList(Unity unit) {
        if(unit.getPlayer().getTeam() == Player.TEAM_BLUE) {
            this.removeBlueUnit();
        } else {
            this.removeRedUnit();
        }
    }
    
    /**
     * Gestion de la suppression des threads
     * Permet de mettre le jeu en pause
     * @param id  Numéro du thread à supprimer
     */
    public void removeFromThreadList(int id) {
        Iterator<targetHouse> iter = this.threadVector.iterator();    
        while (iter.hasNext()) {
            targetHouse str = iter.next();
            if(str.id == id) {
                iter.remove();
            }
        }
    }
    
    /**
     * Fin du jeu
     * Création de la scene associée et affichage du score
     * @param TeamWinner Entier indiquant l'équipe gagante
     */
    public void endOfTheGame(int TeamWinner) {
        new GameOver(this, TeamWinner).setVisible(true);
        for(House elem: this.housesOfGame) {
            elem.destroyGeneration();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Continuer;
    private javax.swing.JPanel Menu;
    private javax.swing.JButton Sauvegarder;
    private javax.swing.JButton backToMenu;
    private component.House house1;
    private component.House house2;
    private component.House house3;
    private component.House house4;
    private component.House house5;
    private component.House house6;
    private component.House house7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel map;
    private component.House spawnBlue;
    private component.House spawnRed;
    private component.UnitiesProgessBar unitiesProgessBar1;
    // End of variables declaration//GEN-END:variables

}
